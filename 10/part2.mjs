import { readFile } from 'fs/promises'

const input = (await readFile('./input.txt')).toString().split('\r\n')
// const input = (await readFile('./test.txt')).toString().split('\r\n')

const alphabet = {
  '.##.#..##..######..##..#': 'A',
  '###.#..####.#..##..####.': 'B',
  '.##.#..##...#...#..#.##.': 'C',
  '#####...###.#...#...####': 'E',
  '#####...###.#...#...#...': 'F',
  '.##.#..##...#.###..#.###': 'G',
  '#..##..######..##..##..#': 'H',
  '.###..#...#...#...#..###': 'I',
  '..##...#...#...##..#.##.': 'J',
  '#..##.#.##..#.#.#.#.#..#': 'K',
  '#...#...#...#...#...####': 'L',
  '.##.#..##..##..##..#.##.': 'O',
  '###.#..##..####.#...#...': 'P',
  '###.#..##..####.#.#.#..#': 'R',
  '.####...#....##....####.': 'S',
  '#..##..##..##..##..#.##.': 'U',
  '#...#....#.#..#...#...#.': 'Y',
  '####...#..#..#..#...####': 'Z',
  '..##...#..#.#....##....##....########....##....##....##....#': 'A',
  '#####.#....##....##....######.#....##....##....##....######.': 'B',
  '.####.#....##.....#.....#.....#.....#.....#.....#....#.####.': 'C',
  '#######.....#.....#.....#####.#.....#.....#.....#.....######': 'E',
  '#######.....#.....#.....#####.#.....#.....#.....#.....#.....': 'F',
  '.####.#....##.....#.....#.....#..####....##....##...##.###.#': 'G',
  '#....##....##....##....########....##....##....##....##....#': 'H',
  '...###....#.....#.....#.....#.....#.....#.#...#.#...#..###..': 'J',
  '#....##...#.#..#..#.#...##....##....#.#...#..#..#...#.#....#': 'K',
  '#.....#.....#.....#.....#.....#.....#.....#.....#.....######': 'L',
  '#....###...###...##.#..##.#..##..#.##..#.##...###...###....#': 'N',
  '#####.#....##....##....######.#.....#.....#.....#.....#.....': 'P',
  '#####.#....##....##....######.#..#..#...#.#...#.#....##....#': 'R',
  '#....##....#.#..#..#..#...##....##...#..#..#..#.#....##....#': 'X',
  '######.....#.....#....#....#....#....#....#.....#.....######': 'Z'
}

let image = ''
let cycle = 0
let x = 1

for (const item of input) {
  if (item === 'noop') {
    if (cycle % 40 === 0) image += '\n'
    image += Math.abs((cycle % 40) - x) <= 1 ? '#' : '.'
    cycle++
  } else {
    if (cycle % 40 === 0) image += '\n'
    image += Math.abs((cycle % 40) - x) <= 1 ? '#' : '.'
    cycle++

    if (cycle % 40 === 0) image += '\n'
    image += Math.abs((cycle % 40) - x) <= 1 ? '#' : '.'
    cycle++

    x += +item.split(' ').pop()
  }
}

let lines = image.trim().split('\n')
const width = lines.length === 6 ? 4 : 6
const spaces = lines.length === 6 ? 1 : 2

let result = ''
if (lines.length === 6 && lines[0].length % 5 !== 0) {
  lines = lines.map((x) => x.replace(/^\./, ''))
}

const letters = Math.ceil(lines[0].length / (width + spaces))
for (let i = 0; i < letters; i++) {
  const letter = lines.map((x) => x.substr(i * (width + spaces), width))
  image += alphabet[letter.join('')]
}

console.info(image.length === letters ? image : `\n${image.trim()}`)
